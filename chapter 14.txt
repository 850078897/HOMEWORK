#8 Queens Puzzle.py 
from unit_tester import test



def share_diagonal(x0, y0, x1, y1):

    """ Is (x0, y0) on a shared diagonal with (x1, y1)? """

    dy = abs(y1 - y0)        # Calc the absolute y distance

    dx = abs(x1 - x0)        # CXalc the absolute x distance

    return dx == dy          # They clash if dx == dy





def col_clashes(bs, c):

    """ Return True if the queen at column c clashes

         with any queen to its left.

    """

    for i in range(c):     # Look at all columns to the left of c

          if share_diagonal(i, bs[i], c, bs[c]):

              return True



def has_clashes(the_board):

    for col in range(1,len(the_board)):

        if col_clashes(the_board, col):

            return True

    return False



def main():

    import random

    rng = random.Random()   # Instantiate a generator



    bd = list(range(8))     # Generate the initial permutation

    num_found = 0

    tries = 0

    while num_found < 10:

       rng.shuffle(bd)

       tries += 1

       if not has_clashes(bd):

           print("Found solution {0} in {1} tries.".format(bd, tries))

           tries = 0

           num_found += 1



main()



test(not share_diagonal(5,2,2,0))

test(share_diagonal(5,2,3,0))

test(share_diagonal(5,2,4,3))

test(share_diagonal(5,2,4,1))

test(not has_clashes([6,4,2,0,5,7,1,3])) # Solution from above

test(has_clashes([4,6,2,0,5,7,1,3]))     # Swap rows of first two

test(has_clashes([0,1,2,3]))             # Try small 4x4 board

test(not has_clashes([2,0,3,1]))

#Class work
from Unit_Tester import test

import time





friends = ["Joe", "Zoe", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]



def search_linear(xs, target):

    """ Find and return the index of target in sequence xs """

    for (i, v) in enumerate(xs):

       if v == target:

           return i

    return -1



def load_words_from_file(filename):

    """ Read words from filename, return list of words. """

    f = open(filename, "r")

    file_content = f.read()

    f.close()

    wds = file_content.split()

    return wds



bigger_vocab = load_words_from_file("vocab.txt")

print("There are {0} words in the vocab, starting with\n {1} "

              .format(len(bigger_vocab), bigger_vocab[:6]))

def find_unknown_words(vocab, wds):

    """ Return a list of words in wds that do not occur in vocab """

    result = []

    for w in wds:

        if (search_binary(vocab, w) < 0):

            result.append(w)

    return result



def text_to_words(the_text):

    """ return a list of words with all punctuation removed,

        and all in lowercase.

    """



    my_substitutions = the_text.maketrans(

      # If you find any of these

      "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&()*+,-./:;<=>?@[]^_`{|}~'\\",

      # Replace them by these

      "abcdefghijklmnopqrstuvwxyz                                          ")



    # Translate the text now.

    cleaned_text = the_text.translate(my_substitutions)

    wds = cleaned_text.split()

    return wds



def get_words_in_book(filename):

    """ Read a book from filename, and return a list of its words. """

    f = open(filename, "r")

    content = f.read()

    f.close()

    wds = text_to_words(content)

    return wds



def search_binary(xs, target):

    """ Find and return the index of key in sequence xs """

    lb = 0

    ub = len(xs)

    while True:

        if lb == ub:   # If region of interest (ROI) becomes empty

           return -1



        # Next probe should be in the middle of the ROI

        mid_index = (lb + ub) // 2



        # Fetch the item at that position

        item_at_mid = xs[mid_index]



        # print("ROI[{0}:{1}](size={2}), probed='{3}', target='{4}'"

        #       .format(lb, ub, ub-lb, item_at_mid, target))



        # How does the probed item compare to the target?

        if item_at_mid == target:

            return mid_index      # Found it!

        if item_at_mid < target:

            lb = mid_index + 1    # Use upper half of ROI next time

        else:

            ub = mid_index        # Use lower half of ROI next time





book_words = get_words_in_book("alice_in_wonderland.txt")

print("There are {0} words in the book, the first 100 are\n{1}".

           format(len(book_words), book_words[:100]))



#missing_words = find_unknown_words(bigger_vocab, book_words)



t0 = time.clock()

missing_words = find_unknown_words(bigger_vocab, book_words)

t1 = time.clock()

print("There are {0} unknown words.".format(len(missing_words)))

print("That took {0:.4f} seconds.".format(t1-t0))



print(missing_words)

test(search_linear(friends, "Zoe") == 1)

test(search_linear(friends, "Joe") == 0)

test(search_linear(friends, "Paris") == 6)

test(search_linear(friends, "Bill") == -1)



vocab = ["apple", "boy", "dog", "down",

                          "fell", "girl", "grass", "the", "tree"]

book_words = "the apple fell from the tree to the grass".split()

test(find_unknown_words(vocab, book_words) == ["from", "to"])

test(find_unknown_words([], book_words) == book_words)

test(find_unknown_words(vocab, ["the", "boy", "fell"]) == [])



test(text_to_words("My name is Earl!") == ["my", "name", "is", "earl"])

test(text_to_words('"Well, I never!", said Alice.') ==

                             ["well", "i", "never", "said", "alice"])



xs = [2,3,5,7,11,13,17,23,29,31,37,43,47,53]

test(search_binary(xs, 20) == -1)

test(search_binary(xs, 99) == -1)

test(search_binary(xs, 1) == -1)

for (i, v) in enumerate(xs):

    test(search_binary(xs, v) == i)

#Unit_Tester
import sys



def test(did_pass):

    """  Print the result of a test.  """

    linenum = sys._getframe(1).f_lineno   # Get the caller's line number.

    if did_pass:

        msg = "Test at line {0} ok.".format(linenum)

    else:

        msg = ("Test at line {0} FAILED.".format(linenum))

    print(msg)

